upto ch - 17 completed

upto ch - 20 completed
    prepairing for profile page
    verified token 

upto ch - 21 completed 
    db.js i'd updated function according to dynamic database collection and fix signup and login js files 
    in login.js file i have made a dynamic secret key and inserted into database using jwt_secret collection
    use of secret key i have tried to retrieve object id of secret key in jwt secret 

upto ch - 22 completed
    retrieved secret key help of object id in jwt_secret collection using findById function
    decode the token data using secret key and send response data on console.log
    according to response data if isVerified true remove loader and show profile page
    after this i had coded for logout and remove token and secret key from the localstorage
    define the autologin function direct open profile if website logined
    coded for if token will be change, token and secret id remove from the localstorage and redirect into homepage i.e. logout the website
    coded for autologout means expired webpage after 24 hour
    commit - coded for profile page according to verify token or not and logout, autologin and autologout after 24 hours

upto ch - 23 completed 
    this is not about project 
    this is about some basics of file system


upto ch - 24 completed
    remove photo link from the webpage and set photos using from directory
    make route for the photo directory using the registry expression.
    
upto ch - 25 completed
    retrieve payout from the token using localstorage
    make api for the sendmail.js 
    make function for the sendmail
    install nodemailer and dotenv 
    mailing system using retrieved payout email data 
    tested email system working or not
    if suceessfully woring email-template setup in email system

upto ch - 26 completed
    made dynamic email verify link using token (token from localstorage) secretid (secret key database id) and verify (user database id)
    email tamplate designed in js file for setup link in verify button
    after this succussfully woring condition databse user database isVerified updated false to true dynamically
    for getting the verify link i have setup verify template 
    in this tamplate verify now btn redirected email server according to email address

upto ch - 27 completed
    starting express js
    create server using express
    make route for the express

upto ch - 28 completed
    this is for express js
    make routing 
    learn about get , post, put, delete, all request
    learn about get = get data form the database
    learn about post = insert data into database
    learn about put = update data from the database
    learn about delete = delete data into the databse
    install body-server
    made separate function for all request for the database

upto ch - 29 completed
    learn about middleware
    make route using module
    defined middleware according to url

upto ch - 30 completed
    learn about pug tamplate engine
    set pug templete

upto ch - 31 completed
    using pug 
    set static path ui
    make rout for all pug file 
    make saperate file for header and its css 
    include header in all pug file

upto ch - 32 completed
    learn about mongoose
    create server using express
    make schema module for user schema using mongoose
    crate and connect database using mongoose
    make function storedata, fetchdata, fetchdatabyid, updatedatabyid, deletedatabyid 
    these all function export as module
    all module imported in index.js file 
    all function call one by one and send argument request, response

upto ch - 33 completed
    explain these funtions 
        storeData 
        fetchData
        fetchDataById
        updateDataById
        deleteDataById
        findByIdAndDelete
        findByIdAndUpdate
        findOne
        findByQuery
        
    explain schema validation according to multiple mobile number
    details of address with detail input

upto ch - 34 completed
    learn about mvc architecture
    make saperate index.html file
    in index.html ajax request to index js file
    learn about multer 
    lean about
        view = frontent files
        routing = routing files
        controller = contoller files

upto ch - 35 completed
    all middlewares are saperated on middleware files
    make storage/images folder and dynamically insert images on this folder using multer
    make schema using mongoose for blogwap database
    create databse/db.js file write code for createData for insert data on the blogs collection
    validated schema for all fields are required and title field is unique

    some change in this chapter for error response about content and title 
 

.......................................................................................................
 deleted ch - 35 all files and 
 
 restored  ch - 35 all files and applied some changes in all files of this chapter
.......................................................................................................

upto ch - 35 completed
    all middlewares are saperated on middleware files
    make storage/images folder and dynamically insert images on this folder using multer
    make schema using mongoose for blogwap database
    create databse/db.js file write code for createData for insert data on the blogs collection
    validated schema for all fields are required and title field is unique

    
upto ch - 36 completed
    validating frontend using unique,
    after that validating frontend using required ,
    retrived all data using get request routing
    retrived data by category using get request category routing

upto ch - 37 completed
    requested get all for all menus
    retrived all menus data 
    seted frontend for all munus

    learn about opps
        learn about class
        learn about object
        learn about constructor
        learn about class property
    commit - requested api using get according to all menues and seted frontend for according to all menus and leant about class, object, constructor, class property

upto ch - 38 completed
    generate express using express generator
    we got project related all folders and files
    we got jade tamplate engine 
    we removed jade tamplate info from packege.json
    then installed node modules
    installed pug 
    removed all routing files for refactor new routing
    added bootstrap 5(lates) cdn for designing
    make frontent with some svg pic and logo
    commit - understood about express generator and create project using express generator

upto ch - 39 completed
    saperate signup in signup.pug as a modal linked by signup button
    saperate signup in login.pug as a modal linked by login button

upto ch - 40 completed
    created index.js and linked it into index.pug page
    activate signup and login request button one by one into login and signup modals
    modified input filed name attibute value according to company info
    ajax post requested and tested for signup data 
    make route for /api/signup for  signup data
    after all this http post request /api/private/company from sinup.route.js
    if all this successfull - testing successfull
    then retrieve body post data using formdata = request.body
    it encrypted using jsonwebtoken and generate secret key crypto.js and thirdparty website
    secret key defined on .env file
    token will expire on 120 seconds  